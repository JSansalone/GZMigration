======================================================================================================================================
==================================================PLANEJAMENTO PARA A VERSÃO 2.0======================================================
======================================================================================================================================

Objetivos:

	Mudar a regra de negócio do aplicativo para que ele recupere os dados através de arquivos .xls em vez de recuperar os dados
	diretamente do banco de dados de origem. O aplicativo não irá mais reconhecer as informações do banco de dados de origem, em vez disso só reconhecerá um padrão
	específico de arquivos .xls onde nos quais os dados deverão estar.

Implementações e correções:

	- br.com.gz.migration.GZMigration: 
	Remover variáveis:
		private CurrentSoftwarePanel currentSoftwarePanel;
	Alterar valor da constante limitIndex para 7;
	
	- br.com.gz.migration.GZMigration.GZMigration():
	Remover as linhas:
		currentSoftwarePanel = new CurrentSoftwarePanel(this);
		wnd.add(currentSoftwarePanel);
		
	- br.com.gz.migration.GZMigration.browse(int):
	Remover a linha currentSoftwarePanel.setVisible(boolean) das instruções case;
	Remover a instrução case 5;
	Atualizar as instruções case;
	
	- br.com.gz.migration.GZMigration.validateDBTo(DatabaseType,DatabaseType):
	Remover;
	
	- br.com.gz.migration.GZMigration.validateDBFrom(DatabaseType,DatabaseType):
	Remover;
	
	- br.com.gz.migration.GZMigration.generateReport():
	Remover a variável currStfCf;
	Remover tudo referente ao banco de origem;
	
	- br.com.gz.migration.GZMigration.setDataProvider():
	Remover a variável from;
	Remover a variável otherSoftware;
	
	- br.com.gz.migration.IValidateDataProvider:
	Remover a interface;
	
	- br.com.gz.migration.MigrationEngine:
	Remover a variável private IDatabaseInfo myCfgFrom;
	Remover a variável private Connection cnnFrom;
	
	- br.com.gz.migration.MigrationEngine.MigrationEngine(ArrayList<EnMigrationDataType>,IFinalizeMigration,IMigrationInfo,IMigrationType,SQLDataProvider,IDatabaseInfo,IDatabaseInfo):
	Reconstruir para MigrationEngine(ArrayList<EnMigrationDataType>,IFinalizeMigration,IMigrationInfo,IMigrationType,SQLDataProvider,IDatabaseInfo);
	Remover as gravações de log do banco de origem;
	
	- br.com.gz.migration.MigrationEngine.run():
	Alterar as gravações de log quando capturar IOException;
	Remover as SQLException's da parte de contagem dos produtos;
	Remover as SecurityViolationException;
	
	- br.com.gz.migration.showSecurityViolationMessage(EnMigrationDataType):
	Remover o método;
	
	- br.com.gz.migration.showSyntaxErrorMessage(EnMigrationDataType):
	Remover o método;
	
	- br.com.gz.migration.SecurityViolationException:
	Remover a exception;
	
	- br.com.gz.migration.SpecialConfigurations:
	Remover a classe;
	
	- br.com.gz.migration.SQLDataProvider.SQDataProvider(EnSoftware,EnSoftware,DatabaseType,DatabaseType):
	Reescrever para SQDataProvider(EnSoftware,DatabaseType), sendo que os dois parâmetros são referentes ao banco de dados de destino;
	
	- br.com.gz.migration.SQLDataProvider:
	Remover as variáveis de instância dbFrom e otherSoftware;
	
	- br.com.gz.migration.SQLDataProvider:
	Todos os métodos add deverão obter seus inserts de constantes em outra classe para facilitar a manutenção dos comandos;
	
	- br.com.gz.migration.SQLDataProvider:
	Os métodos count deverão receber como parâmetro um DataFile que representa o arquivo xls e deverão lançar uma excessão do tipo a ser criado InvalidDataFileException;
	
	- br.com.gz.migration.SQLDataProvider:
	Os métodos get deverão receber como parâmetro um DataFile que representa o arquivo xls e deverão lançar uma excessão do tipo a ser criado InvalidDataFileException;
	
	- br.com.gz.migration.file:
	Criar uma classe chamada DataFile que será a única classe da API do aplicativo a manipular o arquivo de dados;
	
	- br.com.gz.migration.file.DefaultDirectoryStructure.createDefaultStructure:
	A estrutura de diretórios terá apenas uma pasta "data" que terá os arquivos de dados com o nome do respectivo tipo + .xls. Ex.: produto.xls, grupo.xls;
	
	- br.com.gz.migration.panelSteps:
	Remover a classe CurrentSoftwarePanel;
	
	- br.com.gz.migration.panelSteps.ConfirmDataPanel:
	Modificar o modo de resumo das informações para mostrar os tipos de dados escolhidos, nome do cliente e pra onde vão os dados;
	
	- br.com.gz.migration.report.MigrationReportData:
	Retirar todas as informações referentes ao banco de origem, pois não haverá mais essas informações;
	
	- br.com.gz.migration.report.PDFReport:
	Remodelar o relatório;
	
	- br.com.gz.migration.software.SQLDataProviderImpl:
	Não serão necessários os ResultSet's nem PreparedStatements porque os dados serão recuperados de DataFile;
	
	- br.com.gz.migration.sql:
	Remover a classe DefaultSQLStatements;
	Remover a exception SecurityException;
	
	- br.com.gz.migration.sql.XXXRequiredColumns:
	Refatorar para trabalhar com enums, as colunas devem ser representadas por enums;
	
	- br.com.gz.migration.sql.XXXPolicy:
	Os métodos não deverão trabalhar com ResultSetMetaData, e sim com algum tipo fornecido por DataFile;